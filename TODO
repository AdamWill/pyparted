- autoconf/automake the entire tree
      'make install' and make sure Python modules are installed correctly

- use disttools from Python to do as much work as possible

- new native Python classes on top of _ped (going to require a bit of
  thought to figure out what sort of API we want for the 'parted' module,
  the following are just ideas):
      Device
      Disk
      Partition
      Filesystem
      Constraint
      Label

- Walk through all of the src/py*.c files and make sure libparted exceptions
  are captured and filtered back up through Python.  Will need to define some
  sane Python exception classes for libparted's exceptions.

- Handle exceptions from libparted and pass to Python as necessary.  These
  are all of the PED_ASSERT things in libparted.

- Handle exceptions throughout the _ped module code.  Unique exceptions as
  much as possible.

- Make sure PyMemberDef, PyMethodDef, PyGetSetDef, and PyTypeObject
  structures all have docstrings:
      include/pydevice.h
      include/pydisk.h
      include/pytimer.h

- Rename modules under _ped to use all lowercase names.  Make sure all classes
  are named with studly caps (e.g., BigGiantWorthlessClass)

- Implement existing pyparted module on top of _ped, but mark it all as
  deprecated.
      class PedDevice
          get()
          open()
          close()
          sync()
          disk_probe()
          is_busy()
          geometry_new()
          constraint_any()
          disk_new_fresh()
          destroy()
      class PedDisk
          new()
          check_feature()
          next_partition()
          deletepartition()
          delete_all()
          add_partition()
          get_partition()
          get_partition_by_sector()
          partition_new()
          minimize_extended_partition()
          maximize_partition()
          get_primary_partition_count()
          get_last_partition_num()
          commit()
      class PedPartition
          is_flag_available()
          get_flag()
          set_flag()
          is_active()
          set_system()
          set_name()
          get_name()
          is_busy()
      class PedFileSystem
          check()
          copy()
          resize()
          get_resize_constraint()
      class PedFileSystemTypeMethods
          probe_specific()
      class PedConstraint
          duplicate()

      exception_set_handler()

- Do the _ped.X() types for things like PedSector, PedUnit and other things
  where they just have the val attribute, do we need get/set methods?  I
  think so for things like bounds checking and type checking.

- Figure out what, if anything, we can do with timers.  They are optional in
  libparted, but do we want to support them in pyparted?

- Error handling in the get and set methods.

- Free memory in error handling cases.

- Exception handling:
      - Audit error messages to make them more useful.

- Test cases:
    _ped.Alignment
    _ped.CHSGeometry
    _ped.Constraint
    _ped.Device
    _ped.Disk
    _ped.DiskType
    _ped.FileSystem
    _ped.FileSystemType
    _ped.Geometry
    _ped.Partition
    _ped.Timer
    _ped.unit_format_custom_byte
    _ped.unit_format_byte
    _ped.unit_format_custom
    _ped.unit_format
    _ped.unit_get_size
    _ped.unit_parse
    _ped.unit_parse_custom
    _ped.get_device
    _ped.probe_all_devices
    _ped.free_all_devices
    _ped.constraint_new_from_min_max
    _ped.constraint_new_from_min
    _ped.constraint_new_from_max
    _ped.constraint_any
    _ped.constraint_exact
    _ped.file_system_probe
    _ped.file_system_probe_specific

- Add garbage collection support code to the different PyTypeObjects.
  http://docs.python.org/c-api/gcsupport.html#supporting-cycle-detection

- Make sure this new code works in Python 3000

- Look through all PyTypeObject objects and see where we can expand
  their functionality.  Can we add str() support, for instance.

- The git repository has a missing ref in it and it causes git-fetch to
  choke all the time.  Figure out how to remove this from the git repo.
      error: unable to find 09467a8feaa343e6ea79bdeebf3c70834d28941c
      fatal: object 09467a8feaa343e6ea79bdeebf3c70834d28941c not found

- Fix this mess:

  In [1]: import _ped

  In [2]: a = _ped.get_device("/dev/sda")

  In [3]: dir(a)
  Out[3]: []

  In [4]: a.length
  ---------------------------------------------------------------------------
  AttributeError                            Traceback (most recent call last)

  /home/dcantrel/pyparted/<ipython console> in <module>()

  AttributeError: '_ped.Device' object has no attribute 'length'

  In [5]: a
  Out[5]: <_ped.Device object at 0x8ea6d40>

  In [6]: dir(a)
  Out[6]:
  ['__class__',
   '__delattr__',
   '__doc__',
   '__getattribute__',
   '__hash__',
   '__init__',
   '__new__',
   '__reduce__',
   '__reduce_ex__',
   '__repr__',
   '__setattr__',
   '__str__',
   'begin_external_access',
   'bios_geom',
   'boot_dirty',
   'cache_remove',
   'check',
   'close',
   'destroy',
   'did',
   'dirty',
   'end_external_access',
   'external_mode',
   'get_constraint',
   'get_next',
   'host',
   'hw_geom',
   'is_busy',
   'length',
   'model',
   'open',
   'open_count',
   'path',
   'phys_sector_size',
   'read',
   'read_only',
   'sector_size',
   'sync',
   'sync_fast',
   'type',
   'write']

  In [7]: a.length
  Out[7]: 20480544L

  In [8]: # WHAT IS HAPPENING HERE?!

... and much much more
