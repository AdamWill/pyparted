- autoconf/automake the entire tree
      'make install' and make sure Python modules are installed correctly

- use disttools from Python to do as much work as possible

- new native Python classes on top of _ped (going to require a bit of
  thought to figure out what sort of API we want for the 'parted' module,
  the following are just ideas):
      Device
      Disk
      Partition
      Filesystem
      Constraint
      Label

- Walk through all of the src/py*.c files and make sure libparted exceptions
  are captured and filtered back up through Python.  Will need to define some
  sane Python exception classes for libparted's exceptions.

- Handle exceptions from libparted and pass to Python as necessary.  These
  are all of the PED_ASSERT things in libparted.

- Handle exceptions throughout the _ped module code.  Unique exceptions as
  much as possible.

- Make sure PyMemberDef, PyMethodDef, PyGetSetDef, and PyTypeObject
  structures all have docstrings:
      include/pyconstraint.h
      include/pydevice.h
      include/pydisk.h
      include/pyfilesys.h
      include/pygeom.h
      include/pynatmath.h
      include/pytimer.h
      src/_pedmodule.c

- Rename modules under _ped to use all lowercase names.  Make sure all classes
  are named with studly caps (e.g., BigGiantWorthlessClass)

- Implement existing pyparted module on top of _ped, but mark it all as
  deprecated.
      class PedDevice
          get()
          open()
          close()
          sync()
          disk_probe()
          is_busy()
          geometry_new()
          constraint_any()
          disk_new_fresh()
          destroy()
      class PedDisk
          new()
          check_feature()
          next_partition()
          deletepartition()
          delete_all()
          add_partition()
          get_partition()
          get_partition_by_sector()
          partition_new()
          minimize_extended_partition()
          maximize_partition()
          get_primary_partition_count()
          get_last_partition_num()
          commit()
      class PedPartition
          is_flag_available()
          get_flag()
          set_flag()
          is_active()
          set_system()
          set_name()
          get_name()
          is_busy()
      class PedFileSystem
          check()
          copy()
          resize()
          get_resize_constraint()
      class PedFileSystemTypeMethods
          probe_specific()
      class PedConstraint
          duplicate()

      exception_set_handler()

- Do the _ped.X() types for things like PedSector, PedUnit and other things
  where they just have the val attribute, do we need get/set methods?  I
  think so for things like bounds checking and type checking.

- Still left to implement from libparted:
  timer.h:
      py_ped_timer_new

- Figure out what, if anything, we can do with timers.  They are optional in
  libparted, but do we want to support them in pyparted?

- Error handling in the get and set methods.

- Free memory in error handling cases.

- Exception handling:
      - Audit error messages to make them more useful.

- Test cases:
    _ped.Alignment
    _ped.CHSGeometry
    _ped.Constraint
    _ped.Device
    _ped.Disk
    _ped.DiskType
    _ped.FileSystem
    _ped.FileSystemType
    _ped.Geometry
    _ped.Partition
    _ped.Timer
    _ped.unit_format_custom_byte
    _ped.unit_format_byte
    _ped.unit_format_custom
    _ped.unit_format
    _ped.unit_get_size
    _ped.unit_parse
    _ped.unit_parse_custom

... and much much more
