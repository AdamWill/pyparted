- autoconf/automake the entire tree
      'make maintainerclean' should work
      'make distclean' should work
      'make install'

- new native Python classes on top of _ped
      Device
      Disk
      Partition
      Filesystem
      Constraint
      Label

- Walk through all of the src/py*.c files and make sure libparted exceptions
  are captured and filtered back up through Python.  Will need to define some
  sane Python exception classes for libparted's exceptions.

- Implement existing pyparted module on top of _ped, but mark it all as
  deprecated.
      class PedDevice
          get()
          open()
          close()
          sync()
          disk_probe()
          is_busy()
          geometry_new()
          constraint_any()
          disk_new_fresh()
          destroy()
      class PedDisk
          new()
          check_feature()
          next_partition()
          deletepartition()
          delete_all()
          add_partition()
          get_partition()
          get_partition_by_sector()
          partition_new()
          minimize_extended_partition()
          maximize_partition()
          get_primary_partition_count()
          get_last_partition_num()
          commit()
      class PedPartition
          is_flag_available()
          get_flag()
          set_flag()
          is_active()
          set_system()
          set_name()
          get_name()
          is_busy()
      class PedFileSystem
          check()
          copy()
          resize()
          get_resize_constraint()
      class PedFileSystemTypeMethods
          probe_specific()
      class PedConstraint
          duplicate()

      device_get()
      error()
      exception_set_handler()

- Handle exceptions from libparted and pass to Python as necessary.  These
  are all of the PED_ASSERT things in libparted.

- Do the _ped.X() types for things like PedSector, PedUnit and other things
  where they just have the val attribute, do we need get/set methods?  I
  think so for things like bounds checking and type checking.

- unit.h:
      py_ped_unit_parse
      py_ped_unit_parse_custom

- timer.h:
      py_ped_timer_new

- Handle exceptions throughout the _ped module code.  Unique exceptions as
  much as possible.

- Make sure _ped module has Python docstrings galore

- Error handling in the get and set methods.

- Where integers are used as booleans, use PyBool_FromLong.

- Figure out where to put the remainder of the pynatmath.c methods (get them
  out of PyPedModuleMethods[]).

- Do we want to recreate _ped_Unit again, but just to store methods and
  get them out of PyPedModuleMethods[]?

- All of the DISK_*, DEVICE_*, and PARTITION_* types...can those go under
  the appropriate _ped_* object?

- Use convenience functions (e.g., PyLong_FromLongLong) when returning
  values.

- When using PyArg_ParseTuple to read in strings, use "z" to account for
  None being passed in as the string (sets char * to NULL for us).

- Free memory in error handling cases.

- Exception handling:
      - Audit error messages to make them more useful.

... and much much more
